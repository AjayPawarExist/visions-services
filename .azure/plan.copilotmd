# Azure Deployment Plan for TechVision Website

## **Goal**
Deploy the TechVision Next.js 14 TypeScript website with 3D animations and 48 service pages to Azure Container Apps using Azure Developer CLI (azd).

## **Project Information**

**AppName**: techvision-website
- **Technology Stack**: Next.js 14.2.5 with TypeScript, React 18, Framer Motion, Three.js
- **Application Type**: Modern SaaS platform website with interactive 3D animations
- **Containerization**: Ready for deployment with optimized multi-stage Dockerfile
- **Dependencies**: No external database dependencies (static website with rich client-side features)
- **Hosting Recommendation**: Azure Container Apps for scalable, serverless container hosting

## **Azure Resources Architecture**

```mermaid
graph TB
    subgraph "Azure Container Apps Environment"
        CA[Container App<br/>techvision-web]
        CAE[Container Apps Environment]
    end
    
    subgraph "Container Services"
        ACR[Azure Container Registry<br/>acr-{token}]
        MI[Managed Identity<br/>mi-{token}]
    end
    
    subgraph "Monitoring & Logging"
        AI[Application Insights<br/>ai-{token}]
        LAW[Log Analytics Workspace<br/>log-{token}]
    end
    
    subgraph "Networking"
        HTTPS[HTTPS Endpoint]
        DNS[Custom Domain]
    end
    
    User --> HTTPS
    HTTPS --> CA
    CA --> CAE
    CA --> ACR
    MI --> ACR
    CA --> AI
    CAE --> LAW
    AI --> LAW
    DNS --> HTTPS
```

**Data Flow**:
- The container app pulls its image from the Azure Container Registry using managed identity
- The container app receives HTTPS requests and serves the Next.js application
- Application telemetry and logs flow to Application Insights and Log Analytics Workspace
- The managed identity has AcrPull permissions for secure container registry access

## **Recommended Azure Resources**

### **Application Hosting**
- **Application**: techvision-website
  - **Hosting Service Type**: Azure Container Apps
  - **SKU**: Consumption plan (0.25 vCPU, 0.5 GB RAM) with auto-scaling (1-10 replicas)
  - **Configuration**:
    - **Language**: Node.js (Next.js)
    - **Docker File Path**: ./Dockerfile
    - **Docker Context**: .
    - **Environment Variables**: 
      - `NODE_ENV=production`
      - `PORT=3000`
      - `APPLICATIONINSIGHTS_CONNECTION_STRING` (from secret)

### **Supporting Services**
- **Azure Container Registry**: Basic SKU for storing container images
- **User Managed Identity**: For secure access to container registry (AcrPull role)
- **Application Insights**: Web application monitoring and telemetry
- **Log Analytics Workspace**: Centralized logging (30-day retention, 1GB daily quota)

### **Security Configurations**
- **User Managed Identity**: Assigned to container app for secure ACR access
- **AcrPull Role Assignment**: Managed identity has AcrPull permissions on container registry
- **CORS Policy**: Configured for web application access
- **HTTPS**: Enforced for all external traffic
- **Security Headers**: X-Frame-Options, X-Content-Type-Options, CSP

## **Execution Steps**

### **Phase 1: Pre-Deployment Setup**
1. ✅ **Fix Next.js Configuration**: Updated next.config.mjs for standalone output
2. ✅ **Create Dockerfile**: Multi-stage build with security best practices
3. ✅ **Create Azure Configuration**: azure.yaml and Bicep infrastructure files
4. ✅ **Environment Setup**: Production environment variables and configuration

### **Phase 2: Infrastructure Deployment**
1. **Install Prerequisites**:
   ```bash
   # Install Azure Developer CLI
   winget install microsoft.azd
   
   # Install Docker Desktop (if not installed)
   winget install Docker.DockerDesktop
   
   # Verify installations
   azd version
   docker --version
   az --version
   ```

2. **Initialize Azure Developer CLI**:
   ```bash
   # Login to Azure
   azd auth login
   
   # Initialize the project
   azd init
   ```

3. **Provision and Deploy**:
   ```bash
   # Preview deployment
   azd provision --preview
   
   # Deploy infrastructure and application
   azd up
   ```

### **Phase 3: Post-Deployment Validation**
1. **Check Deployment Status**:
   ```bash
   # Check logs
   azd logs
   
   # Monitor application
   azd monitor
   ```

2. **Validate Application**:
   - Test the deployed URL
   - Verify all 48 service pages load correctly
   - Check 3D animations and interactive features
   - Validate contact forms and navigation

3. **Performance Optimization**:
   - Configure custom domain (optional)
   - Set up CDN for static assets (optional)
   - Configure Application Insights dashboards

## **Expected Deployment Time**
- **Infrastructure Provisioning**: 5-10 minutes
- **Container Build & Deploy**: 10-15 minutes
- **Total Deployment Time**: 15-25 minutes

## **Cost Estimation**
- **Azure Container Apps**: ~$20-50/month (depending on usage)
- **Container Registry**: ~$5/month (Basic tier)
- **Application Insights**: ~$2-10/month (depending on telemetry volume)
- **Log Analytics**: ~$3-15/month (depending on log volume)
- **Total Estimated Cost**: ~$30-80/month

## **Post-Deployment Checklist**
- [ ] Application loads successfully at provided URL
- [ ] All 48 service pages are accessible
- [ ] 3D animations and interactive features work
- [ ] Contact forms submit successfully
- [ ] Mobile responsiveness verified
- [ ] Application Insights receiving telemetry
- [ ] Custom domain configured (if required)
- [ ] SSL certificate working
- [ ] Performance metrics within acceptable range

## **Rollback Plan**
If deployment fails:
1. Check Azure portal for error details
2. Review Application Insights for runtime errors
3. Use `azd down` to remove resources if needed
4. Fix issues and redeploy with `azd up`

## **Next Steps After Deployment**
1. **Custom Domain**: Configure custom domain and SSL certificate
2. **CDN Setup**: Add Azure CDN for global content delivery
3. **Monitoring**: Set up Application Insights alerts and dashboards
4. **CI/CD Pipeline**: Implement GitHub Actions for automated deployments
5. **Backup Strategy**: Configure backup for container images and configuration